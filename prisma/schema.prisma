// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")

}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  password      String
  verified      Boolean         @default(false)
  role          Role            @default(USER)
  books         Book[]          @relation("UserBooks")
  orders        Order[]         @relation("UserOrders")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
}

model Book {
  id        String     @id @default(uuid())
  status    BookStatus @default(PENDING)
  title     String
  author    String
  condition Condition
  price     Float
  isbn      String     @unique
  sellerId  String
  seller    User       @relation("UserBooks", fields: [sellerId], references: [id])
  orders    Order[]    @relation("BookOrders")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  buyerId    String
  bookId     String
  quantity   Int         @default(1)
  totalPrice Float
  buyer      User        @relation("UserOrders", fields: [buyerId], references: [id])
  book       Book        @relation("BookOrders", fields: [bookId], references: [id])
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Condition {
  NEW
  GOOD
  FAIR
  POOR
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum BookStatus {
  PENDING
  APPROVED
  REJECTED
}
